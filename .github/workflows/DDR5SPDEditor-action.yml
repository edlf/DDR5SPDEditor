name: Build DDR5SPDEditor

on:
  push:
    branches: [ main, ci-test ]
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches: [ main, ci-test ]
  workflow_dispatch:

jobs:
  build:
    permissions:
      contents: write

    runs-on: ${{ matrix.sys.os }}
    container: ${{ matrix.sys.container }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: true

      matrix:
        sys:
          - { os: ubuntu-latest , shell: bash           , cxx: g++-13, release_name: DDR5SPDEditor-linux-x86_64-qt6 }
          - { os: ubuntu-latest , shell: 'alpine.sh {0}', cxx: g++   , release_name: DDR5SPDEditor-linux-x86_64-qt6-alpine }
          - { os: windows-latest, shell: 'msys2 {0}'    , cxx: g++   , release_name: DDR5SPDEditor-win-x86_64-qt6.7z }
        build_type: [Release]

    defaults:
      run:
        shell: ${{ matrix.sys.shell }}

    steps:

    - name: Install packages required for the workflow and build deps
      uses: ConorMacBride/install-package@v1
      with:
        apt: build-essential cmake file gcc make ninja-build pkgconf sudo ${{ env.QT_PACKAGE }}
      env:
        QT_PACKAGE: ${{ matrix.sys.os == 'ubuntu-20.04' && 'qt5-default qtbase5-dev qt5-qmake libqt5widgets5 libqt5opengl5 libqt5opengl5-dev libqt5gui5 libgl1-mesa-dev libglvnd-dev' || 'qt6-base-dev qt6-base-dev-tools qmake6 libqt6openglwidgets6 libqt6opengl6 libqt6opengl6-dev libqt6gui6 libgl1-mesa-dev libglvnd-dev' }}

    - name: Install & configure Alpine Linux build environment
      uses: jirutka/setup-alpine@v1
      if: matrix.sys.shell == 'alpine.sh {0}'
      with:
        packages: build-base cmake curl dialog eudev eudev-dev eudev-libs git libusb-dev linux-headers make ninja-build pkgconf pkgconf-dev py3-pip py3-setuptools python3 samurai sudo wget qt6-qtbase qt6-qtbase-dev qt6-qttools qt6-qttools-dev qt6-qttools-libs mesa mesa-gl mesa-dev

    - name: Setup MSYS2 UCRT64
      if: matrix.sys.shell == 'msys2 {0}'
      uses: msys2/setup-msys2@v2
      with:
        msystem: UCRT64
        update: true
        install: git make mingw-w64-ucrt-x86_64-gcc mingw-w64-ucrt-x86_64-qt6-base mingw-w64-ucrt-x86_64-7zip
        pacboy: cmake:p ninja:p toolchain:p

    - name: Setup 'Toolchain test builds' PPA & install GCC 13
      if: matrix.sys.shell == 'bash'
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt update
        sudo apt install gcc-13-base gcc-13 g++-13 libstdc++-13-dev libstdc++6

    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Configure CMake project
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ${{ env.extra_flags }}
      env:
        CXX: ${{ matrix.sys.cxx }}
        CC: ${{ matrix.sys.cxx == 'g++-13' && 'gcc-13' || 'gcc' }}
        extra_flags: ${{ startsWith( matrix.sys.os, 'windows' ) && '-DCMAKE_FIND_LIBRARY_SUFFIXES=".a" -DCMAKE_EXE_LINKER_FLAGS="-static-libgcc -static-libstdc++"' || ' ' }}

    - name: Build CMake project
      run: cmake --build build

    - name: Prepare binaries and make Windows archive with libs
      if: matrix.sys.release_name != ''
      run: |
        if [[ "${{ env.is_windows_build}}" == "true" ]]; then
          7z -mx=9 a build/${{ matrix.sys.release_name }} ./build/${{ env.binary_orig }}.exe "/ucrt64/bin/Qt6Core.dll" "/ucrt64/bin/Qt6Widgets.dll" "/ucrt64/bin/Qt6Gui.dll"
        else
          mv build/${{ env.binary_orig }} build/${{ matrix.sys.release_name }}
        fi
      env:
        binary_orig: 'DDR5SPDEditor'
        is_windows_build: ${{ startsWith( matrix.sys.os, 'windows' ) && 'true' || 'false' }}

    - name: Make and upload release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/') && matrix.sys.release_name != ''
      with:
        fail_on_unmatched_files: false
        generate_release_notes: true        
        files: build/${{ matrix.sys.release_name }}
